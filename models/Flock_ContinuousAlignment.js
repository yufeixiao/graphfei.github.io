// Generated by GPT.
// Below is a simple example of a JavaScript code snippet for a basic model of informed individuals flock. This example uses HTML5 canvas for visualization and assumes a basic update rule for the flocking behavior. You can adjust the number of informed individuals and the alignment strength as needed.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    canvas {
      border: 1px solid #000;
    }
  </style>
  <title>Informed Individuals Flock</title>
</head>
<body>
  <canvas id="flockCanvas" width="800" height="600"></canvas>

  <script>
    const canvas = document.getElementById('flockCanvas');
    const ctx = canvas.getContext('2d');

    // Define parameters
    const flockSize = 100; // Total number of individuals
    const informedPercentage = 0.1; // Percentage of informed individuals
    const alignmentStrength = 0.1; // Strength of alignment behavior

    // Define individuals
    let individuals = [];

    // Initialize individuals
    for (let i = 0; i < flockSize; i++) {
      individuals.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        angle: Math.random() * Math.PI * 2,
        informed: Math.random() < informedPercentage,
      });
    }

    // Update function
    function update() {
      individuals.forEach((individual) => {
        // Update position
        individual.x += Math.cos(individual.angle);
        individual.y += Math.sin(individual.angle);

        // Apply alignment behavior
        if (individual.informed) {
          individuals.forEach((other) => {
            if (other !== individual && other.informed) {
              const angleDiff = Math.atan2(other.y - individual.y, other.x - individual.x);
              individual.angle += alignmentStrength * (angleDiff - individual.angle);
            }
          });
        }

        // Wrap around canvas edges
        individual.x = (individual.x + canvas.width) % canvas.width;
        individual.y = (individual.y + canvas.height) % canvas.height;
      });
    }

    // Render function
    function render() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      individuals.forEach((individual) => {
        ctx.fillStyle = individual.informed ? 'blue' : 'black';
        ctx.beginPath();
        ctx.arc(individual.x, individual.y, 5, 0, Math.PI * 2);
        ctx.fill();
      });
    }

    // Animation loop
    function animate() {
      update();
      render();
      requestAnimationFrame(animate);
    }

    // Start animation
    animate();
  </script>
</body>
</html>
